apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
//    splits {
//        abi {
//            reset()//重置 ABI 列表为只包含一个空字符串（与 include 一起使用可以表示要使用哪一个 ABI，而不是要 exclude 哪些 ABI）
//            enable true // 设为true，才能启用ABI拆分机制在打包时根据架构生成不同的apk文件
//            universalApk false  // If true, 构建支持所有平台abi类型，构建一个包，包含多个架构的so(只要代码中有的都会打进去)
//            include "armeabi-v7a" , "armeabi" // 设置所有要支持的abi类型，构建多个包，每个包只包含一个架构的so
//            exclude "x86"   // 设置所有不要支持的abi类型
//        }
//    }

    defaultConfig {
        applicationId "com.example.pixaloop"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

//        externalNativeBuild {
//            cmake {
//                cppFlags "-std=c++14"
////                arguments "-DANDROID_TOOLCHAIN=clang",
////                        "-DANDROID_STL=c++_shared"
////                abiFilters "armeabi-v7a"
//                //targets "render"
//            }
////            ndk {
////                //选择要添加的对应cpu类型的.so库。
////                abiFilters "x86_64","x86",'armeabi-v7a','armeabi-v8a'
////                // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
////            }
//        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    lintOptions{
        checkReleaseBuilds false
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }


    }
}

dependencies {
    implementation project(':opencv')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.core:core:1.3.0'
    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: '29.0-android'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation "com.google.auto.value:auto-value:1.4.1"
    //apt  "com.google.auto.value:auto-value:1.4.1"
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    // (see https://github.com/ReactiveX/RxJava/releases for latest 3.x.x version)
    implementation 'io.reactivex.rxjava3:rxjava:3.0.0'
}
